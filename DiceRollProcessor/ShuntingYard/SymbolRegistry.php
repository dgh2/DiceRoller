<?phpnamespace ShuntingYard;require_once('OperatorRegistry/BinaryOperatorEntry.php');require_once('OperatorRegistry/CloseArrayOperatorEntry.php');require_once('OperatorRegistry/CloseGroupOperatorEntry.php');require_once('OperatorRegistry/FunctionEntry.php');require_once('OperatorRegistry/Interfaces/HasOperation.php');require_once('OperatorRegistry/NullaryOperatorEntry.php');require_once('OperatorRegistry/OpenArrayOperatorEntry.php');require_once('OperatorRegistry/OpenGroupOperatorEntry.php');require_once('OperatorRegistry/SeparatorEntry.php');require_once('OperatorRegistry/UnaryOperatorEntry.php');use ShuntingYard\OperatorRegistry\BinaryOperatorEntry;use ShuntingYard\OperatorRegistry\CloseArrayOperatorEntry;use ShuntingYard\OperatorRegistry\CloseGroupOperatorEntry;use ShuntingYard\OperatorRegistry\FunctionEntry;use ShuntingYard\OperatorRegistry\Interfaces\HasOperation;use ShuntingYard\OperatorRegistry\NullaryOperatorEntry;use ShuntingYard\OperatorRegistry\OpenArrayOperatorEntry;use ShuntingYard\OperatorRegistry\OpenGroupOperatorEntry;use ShuntingYard\OperatorRegistry\SeparatorEntry;use ShuntingYard\OperatorRegistry\UnaryOperatorEntry;class SymbolRegistry{    /** @var NullaryOperatorEntry[] */    private $nullaryOperatorEntries = [];    /** @var UnaryOperatorEntry[] */    private $unaryOperatorEntries = [];    /** @var BinaryOperatorEntry[] */    private $binaryOperatorEntries = [];    /** @var FunctionEntry[] */    private $functionEntries = [];    /** @var OpenGroupOperatorEntry[] */    private $openGroupOperatorEntries = [];    /** @var CloseGroupOperatorEntry[] */    private $closeGroupOperatorEntries = [];    /** @var OpenArrayOperatorEntry[] */    private $openArrayOperatorEntries = [];    /** @var CloseArrayOperatorEntry[] */    private $closeArrayOperatorEntries = [];    /** @var SeparatorEntry[] */    private $separatorEntries = [];    /** @return string[] */    public function getSymbolNames(): array    {        return array_unique(array_merge(            $this->getNullaryOperatorNames(),            $this->getUnaryOperatorNames(),            $this->getBinaryOperatorNames(),            $this->getFunctionNames(),            $this->getOpenGroupOperatorNames(),            $this->getCloseGroupOperatorNames(),            $this->getOpenArrayOperatorNames(),            $this->getCloseArrayOperatorNames(),            $this->getSeparatorNames()));    }    /** @return string[] */    public function getNullaryOperatorNames(): array    {        $registeredOperations = [];        foreach ($this->nullaryOperatorEntries as $operatorEntry) {            $registeredOperations[] = $operatorEntry->getName();        }        return $registeredOperations;    }    /**     * @param null|mixed $fixFilter If set, only return unary operators that match the requested fix from UnaryOperatorEntry     * @return string[]     */    public function getUnaryOperatorNames($fixFilter = null): array    {        $registeredOperations = [];        foreach ($this->unaryOperatorEntries as $operatorEntry) {            if (!isset($fixFilter) || $operatorEntry->getFix() == $fixFilter) {                $registeredOperations[] = $operatorEntry->getName();            }        }        return $registeredOperations;    }    /** @return string[] */    public function getBinaryOperatorNames(): array    {        $registeredOperations = [];        foreach ($this->binaryOperatorEntries as $operatorEntry) {            $registeredOperations[] = $operatorEntry->getName();        }        return $registeredOperations;    }    /** @return string[] */    public function getFunctionNames(): array    {        $registeredFunctions = [];        foreach ($this->functionEntries as $functionEntry) {            $registeredFunctions[] = $functionEntry->getName();        }        return $registeredFunctions;    }    /** @return string[] */    public function getOpenGroupOperatorNames(): array    {        $registeredGroupOperations = [];        foreach ($this->openGroupOperatorEntries as $groupOperatorEntry) {            $registeredGroupOperations[] = $groupOperatorEntry->getOpen();        }        return $registeredGroupOperations;    }    /** @return string[] */    public function getCloseGroupOperatorNames(): array    {        $registeredGroupOperations = [];        foreach ($this->closeGroupOperatorEntries as $groupOperatorEntry) {            $registeredGroupOperations[] = $groupOperatorEntry->getClose();        }        return $registeredGroupOperations;    }    /** @return string[] */    public function getOpenArrayOperatorNames(): array    {        $registeredArrayOperations = [];        foreach ($this->openArrayOperatorEntries as $arrayOperatorEntry) {            $registeredArrayOperations[] = $arrayOperatorEntry->getOpen();        }        return $registeredArrayOperations;    }    /** @return string[] */    public function getCloseArrayOperatorNames(): array    {        $registeredArrayOperations = [];        foreach ($this->closeArrayOperatorEntries as $arrayOperatorEntry) {            $registeredArrayOperations[] = $arrayOperatorEntry->getClose();        }        return $registeredArrayOperations;    }    /** @return string[] */    public function getSeparatorNames(): array    {        $registeredSeparators = [];        foreach ($this->separatorEntries as $separatorEntry) {            $registeredSeparators[] = $separatorEntry->getName();        }        return $registeredSeparators;    }    /**     * @param $operator string     * @return bool     */    public function isSymbolName($operator): bool    {        return in_array($operator, $this->getSymbolNames(), true);    }    /**     * @param $operator string     * @return bool     */    public function isNullaryOperatorName($operator): bool    {        return in_array($operator, $this->getNullaryOperatorNames(), true);    }    /**     * @param $operator string     * @return bool     */    public function isUnaryOperatorName($operator): bool    {        return in_array($operator, $this->getUnaryOperatorNames(), true);    }    /**     * @param $operator string     * @param $fix string     * @return bool     */    public function isUnaryOperator($operator, $fix): bool    {        foreach ($this->unaryOperatorEntries as $operatorEntry) {            if ($operatorEntry->getName() == $operator && $operatorEntry->getFix() == $fix) {                return true;            }        }        return false;    }    /**     * @param $operator string     * @return bool     */    public function isBinaryOperatorName($operator): bool    {        return in_array($operator, $this->getBinaryOperatorNames(), true);    }    /**     * @param $operator string     * @return bool     */    public function isFunctionName($operator): bool    {        return in_array($operator, $this->getFunctionNames(), true);    }    /**     * @param $openOperator string     * @param $closeOperator string     * @return bool     */    public function isGroupOperatorNamePair($openOperator, $closeOperator): bool    {        foreach ($this->closeGroupOperatorEntries as $groupOperatorEntry) {            if ($groupOperatorEntry->getClose() == $closeOperator && $groupOperatorEntry->getOpen() == $openOperator) {                return true;            }        }        return false;    }    /**     * @param $operator string     * @return bool     */    public function isOpenGroupOperatorName($operator): bool    {        return in_array($operator, $this->getOpenGroupOperatorNames(), true);    }    /**     * @param $operator string     * @return bool     */    public function isCloseGroupOperatorName($operator): bool    {        return in_array($operator, $this->getCloseGroupOperatorNames(), true);    }    /**     * @param $operator string     * @return bool     */    public function isOpenArrayOperatorName($operator): bool    {        return in_array($operator, $this->getOpenArrayOperatorNames(), true);    }    /**     * @param $operator string     * @return bool     */    public function isCloseArrayOperatorName($operator): bool    {        return in_array($operator, $this->getCloseArrayOperatorNames(), true);    }    /**     * @param $operator string     * @return bool     */    public function isSeparatorName($operator): bool    {        return in_array($operator, $this->getSeparatorNames(), true);    }    /**     * @param $operation HasOperation     * @return bool     */    public function register($operation): bool    {        if ($operation instanceof OpenGroupOperatorEntry) {            $this->openGroupOperatorEntries[] = $operation;        } elseif ($operation instanceof CloseGroupOperatorEntry) {            $this->closeGroupOperatorEntries[] = $operation;        } elseif ($operation instanceof OpenArrayOperatorEntry) {            $this->openArrayOperatorEntries[] = $operation;        } elseif ($operation instanceof CloseArrayOperatorEntry) {            $this->closeArrayOperatorEntries[] = $operation;        } elseif ($operation instanceof SeparatorEntry) {            $this->separatorEntries[] = $operation;        } elseif ($operation instanceof FunctionEntry) {            $this->functionEntries[] = $operation;        } elseif ($operation instanceof NullaryOperatorEntry) {            $this->nullaryOperatorEntries[] = $operation;        } elseif ($operation instanceof UnaryOperatorEntry) {            $this->unaryOperatorEntries[] = $operation;        } elseif ($operation instanceof BinaryOperatorEntry) {            $this->binaryOperatorEntries[] = $operation;        } else {            return false;        }        return true;    }    /**     * @param $operator string     * @return NullaryOperatorEntry     */    public function getNullaryOperatorEntry($operator): ?NullaryOperatorEntry    {        foreach ($this->nullaryOperatorEntries as $operatorEntry) {            if ($operatorEntry->getName() == $operator) {                return $operatorEntry;            }        }        return null;    }    /**     * @param $operator string     * @param $fix string     * @return UnaryOperatorEntry     */    public function getUnaryOperatorEntry($operator, $fix): ?UnaryOperatorEntry    {        foreach ($this->unaryOperatorEntries as $operatorEntry) {            if ($operatorEntry->getName() == $operator && $operatorEntry->getFix() == $fix) {                return $operatorEntry;            }        }        return null;    }    /**     * @param $operator string     * @return BinaryOperatorEntry     */    public function getBinaryOperatorEntry($operator): ?BinaryOperatorEntry    {        foreach ($this->binaryOperatorEntries as $operatorEntry) {            if ($operatorEntry->getName() == $operator) {                return $operatorEntry;            }        }        return null;    }    /**     * @param $operator string     * @return OpenGroupOperatorEntry     */    public function getOpenGroupOperatorEntry($operator): ?OpenGroupOperatorEntry    {        foreach ($this->openGroupOperatorEntries as $groupOperatorEntry) {            if ($groupOperatorEntry->getOpen() == $operator) {                return $groupOperatorEntry;            }        }        return null;    }    /**     * @param $operator string     * @return CloseGroupOperatorEntry     */    public function getCloseGroupOperatorEntry($operator): ?CloseGroupOperatorEntry    {        foreach ($this->closeGroupOperatorEntries as $groupOperatorEntry) {            if ($groupOperatorEntry->getClose() == $operator) {                return $groupOperatorEntry;            }        }        return null;    }    /**     * @param $operator string     * @return OpenArrayOperatorEntry     */    public function getOpenArrayOperatorEntry($operator): ?OpenArrayOperatorEntry    {        foreach ($this->openArrayOperatorEntries as $arrayOperatorEntry) {            if ($arrayOperatorEntry->getOpen() == $operator) {                return $arrayOperatorEntry;            }        }        return null;    }    /**     * @param $operator string     * @return CloseArrayOperatorEntry     */    public function getCloseArrayOperatorEntry($operator): ?CloseArrayOperatorEntry    {        foreach ($this->closeArrayOperatorEntries as $arrayOperatorEntry) {            if ($arrayOperatorEntry->getClose() == $operator) {                return $arrayOperatorEntry;            }        }        return null;    }    /**     * @param $operator string     * @return SeparatorEntry     */    public function getSeparatorEntry($operator): ?SeparatorEntry    {        foreach ($this->separatorEntries as $separatorEntry) {            if ($separatorEntry->getName() == $operator) {                return $separatorEntry;            }        }        return null;    }    /**     * @param $operator string     * @return FunctionEntry     */    public function getFunctionEntry($operator): ?FunctionEntry    {        foreach ($this->functionEntries as $functionEntry) {            if ($functionEntry->getName() == $operator) {                return $functionEntry;            }        }        return null;    }}