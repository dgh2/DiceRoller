<html><body><?phperror_reporting(E_ALL);ini_set('display_errors', 1);require_once('DiceRollProcessor/ShuntingYard/ShuntingYardProcessor.php');require_once('DiceRollProcessor/DiceRollSymbolRegistry.php');require_once('DiceRollProcessor/DiceRollHelp.php');require_once('DiceRollProcessor/RollFormGenerator.php');use ShuntingYard\ShuntingYardProcessor;const ROLL_COMMAND_PARAMETER = 'roll';const DISPLAY_LOG_PARAMETER = 'log';const DISPLAY_CALC_LOG_PARAMETER = 'calc';const DISPLAY_DEBUG_PARAMETER = 'debug';const NBSP_PATTERN = '\xA0';const DEFAULT_ROLL_COMMAND = 'd20';const HELP_COMMAND = 'help';const SUBMIT_BUTTON_TEXT = 'Roll it!';$displayLog = true;$displayCalcLog = false;$displayDebug = false;$command = null;$processingResult = null;if (isSet($_GET[ROLL_COMMAND_PARAMETER]) && trim($_GET[ROLL_COMMAND_PARAMETER]) != '') {    $command = $_GET[ROLL_COMMAND_PARAMETER];    $command = htmlentities($command, ENT_QUOTES);    $command = preg_replace('# |' . NBSP_PATTERN . '#', '', $command);    //register an error handler to echo out any error messages from exceptions    register_shutdown_function(function () use ($command) {        $last_error = error_get_last();        if ($last_error['type'] === E_ERROR) {            echo "<strong>An error occurred while processing $command: " . $last_error["message"] . "</strong>";        }    });}if (isset($command) && trim($command) !== '') {    echo RollFormGenerator::generate(html_entity_decode($command), SUBMIT_BUTTON_TEXT);} else {    echo RollFormGenerator::generate(DEFAULT_ROLL_COMMAND, SUBMIT_BUTTON_TEXT);}if (isset($_GET[DISPLAY_LOG_PARAMETER]) && trim($_GET[DISPLAY_LOG_PARAMETER]) != '') {    $displayLog = $_GET[DISPLAY_LOG_PARAMETER];    $displayLog = htmlentities($displayLog, ENT_QUOTES);    $displayLog = ($displayLog == 'true');}if (isset($_GET[DISPLAY_CALC_LOG_PARAMETER]) && trim($_GET[DISPLAY_CALC_LOG_PARAMETER]) != '') {    $displayCalcLog = $_GET[DISPLAY_CALC_LOG_PARAMETER];    $displayCalcLog = htmlentities($displayCalcLog, ENT_QUOTES);    $displayCalcLog = ($displayCalcLog == 'true');}if (isset($_GET[DISPLAY_DEBUG_PARAMETER]) && trim($_GET[DISPLAY_DEBUG_PARAMETER]) != '') {    $displayDebug = $_GET[DISPLAY_DEBUG_PARAMETER];    $displayDebug = htmlentities($displayDebug, ENT_QUOTES);    $displayDebug = ($displayDebug == 'true');}if (isset($command)) {    $output = '';    $symbolRegistry = new DiceRollSymbolRegistry();    if ($command == HELP_COMMAND) {        $output .= (new DiceRollHelp($symbolRegistry))->getHelpText('<br/>');    } else {        $processor = new ShuntingYardProcessor($symbolRegistry);        try {            $processor->processCommand($command);        } finally {            $processingResult = '';            if ($processor->success()) {                $processingResult = 'Result = ' . $symbolRegistry->recursiveImplode(',', $processor->getProcessingResult());            } else {                $processingResult = 'Failed to process input: ' . $command . '<br/>' . $processor->getError();            }            $output = '<strong>' . $processingResult . '</strong>';            if ($displayCalcLog || $displayLog) {                $log = $symbolRegistry->getLogString('<br/>', $displayCalcLog, $displayLog);                if (!empty($log)) {                    $output .= '<br/>' . $log;                }            }        }    }    if ($displayDebug && !empty($processor->getDebugLog())) {        $debugLog = $processor->getDebugLog();        $output .= '<br/><br/>Debug logs:';        foreach ($debugLog as $log) {            $output .= '<br/>' . $log;        }    }    echo $output;}?></body></html>